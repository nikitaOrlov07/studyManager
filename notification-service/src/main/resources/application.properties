eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=notification-service
server.port=8083


# Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
# Specifies the identifier for the consumer group to which the Kafka consumer belongs. A consumer group is a collection of consumers that work together to consume messages from Kafka topics. Consumers are services or applications that use Kafka.
spring.kafka.consumer.group-id= notificationId
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=com.example.notification_service.conf.CustomDeserializer
# (For Deserialization)This property is used to map a specific type of JSON data to a Java class. It helps Kafka consumers understand how to deserialize incoming JSON messages into specific Java objects.
# (on the other side (order service),  we pass the OrderPlacedEvent class as a parameter as a json format, and here we convert the json format to the class format )
spring.kafka.consumer.properties.spring.json.type.mapping=event:com.example.notification_service.Dto.UserEntityDto
# This property specifies how to deserialize incoming JSON messages into consumer-side Java objects. It helps to configure the mapping between the message type and the Java class to be used for deserialization.
spring.kafka.consumer.properties.json.type.mapping=event:com.example.notification_service.Dto.UserEntityDto
spring.kafka.consumer.properties.spring.json.trusted.packages=*


### Grafana Metrics Properties
# one property is already specified management.endpoints.web.exposure.include=*,health,info,metrics,prometheus
# This property enables the collection of histogram data for HTTP server requests. This means it will track not just average request durations but also how requests are distributed across different latency percentiles (e.g., 50th percentile, 95th percentile). This can be useful for understanding the performance characteristics of your application, particularly in how it handles various ranges of response times.
management.metrics.distribution.percentiles-histogram.http.server.requests=true
#  This property sets a custom key-value pair for observations.
management.observations.key-values.application=notification-service


### Grafana Tracing properties
# sets the sampling probability for tracing to 100%. This means that all requests will be traced, and no requests will be excluded from the trace collection. (by default it is 10% (0.1))
management.tracing.sampling.probability=1.0




