spring.application.name=user-service
# Database configuration
spring.datasource.url=jdbc:postgresql://localhost:5432/userService
spring.datasource.username=postgres
spring.datasource.password=07022005
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA / Hibernate Configuration
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false

# App will work in this port
server.port=8082

### Discovery Server
eureka.client.service-url.defaultZone = http://localhost:8761/eureka


### Kafka Property
# specifies the address of the Kafka broker(s) that the Spring application should connect to. It tells Spring Kafka where to find the Kafka cluster for producing and consuming messages.
# means that kafka broker will be running at localhost: 9092
# can specify multiple Kafka broker addresses by separating them with commas . Example: spring.kafka.bootstrap-servers=broker1:9092,broker2:9092,broker3:9092
# means that kafka broker will be running at localhost: 9092
spring.kafka.bootstrap-servers=localhost:9092
# By default messages will be sent to "notificationTopic" topic
spring.kafka.template.default-topic=notificationTopic
# The key will be converted to byte code using this serializer before being passed to the send method
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# Specifies the serializer class used to convert the message values into JSON format before sending them to Kafka
spring.kafka.producer.value-serializer= com.example.userservice.kafka_config.UserEntityDtoSerializer
# When sending a message to Kafka using the send method, your Java object will be serialized to JSON with the type specified as 'event'
spring.kafka.producer.properties.json.type.mapping=event::com.example.userservice.Dto.UserEntityDto
spring.kafka.producer.group-id= notificationId


### Grafana Metrics Properties
# one property is already specified management.endpoints.web.exposure.include=*,health,info,metrics,prometheus
# This property enables the collection of histogram data for HTTP server requests. This means it will track not just average request durations but also how requests are distributed across different latency percentiles (e.g., 50th percentile, 95th percentile). This can be useful for understanding the performance characteristics of your application, particularly in how it handles various ranges of response times.
management.metrics.distribution.percentiles-histogram.http.server.requests=true
#  This property sets a custom key-value pair for observations.
management.observations.key-values.application=user-service


### Grafana Tracing properties
# sets the sampling probability for tracing to 100%. This means that all requests will be traced, and no requests will be excluded from the trace collection. (by default it is 10% (0.1))
management.tracing.sampling.probability=1.0




